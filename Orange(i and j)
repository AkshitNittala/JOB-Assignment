orange i 
module fsm(a,b,ps,ns,y);
input logic a,b;
input logic[1:0] ps;
output logic[1:0] ns;
output logic y;
assign ns[0]=a&~ps[1]&~ps[0];
assign ns[1]=b&ps[0];
always_comb
begin
if (ns==2'b10)
y=1;
else
y=0;
end
endmodule

module fsmtb;
reg a,b;
reg[1:0]ps;
wire[1:0]ns;
wire y;
fsm dut (a,b,ps,ns,y);
initial
begin
ps=2'b00;a=0;b=1'bx;
#10 ps=2'b00;a=1;b=1'bx;
#10 ps=2'b01;a=1'bx;b=1'b0;
#10 ps=2'b01;a=1'bx;b=1'b1;
#10 ps=2'b10;a=1'bx;b=1'bx;
end
endmodule

orange j
module gcc(n,g);
input logic[2:0]n;
output logic[2:0]g;
assign g[2]=n[2];
assign g[1]=n[1]^n[2];
assign g[0]=n[0]^n[1];
endmodule

module gcctb;
reg[2:0]n;
wire[2:0] g;
gcc dut (n,g);
initial
begin
n=3'b000;
#10 n=3'b001;
#10 n=3'b010;
#10 n=3'b011;
#10 n=3'b100;
#10 n=3'b101;
#10 n=3'b110;
#10 n=3'b111;
end
endmodule
