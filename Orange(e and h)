orange e:
module pe(a,y);
input logic[3:0] a;
output logic[1:0] y;
assign y[1]= a[2]|a[3];
assign y[0] = (~a[2]&a[1])|a[3];
endmodule

module petb;
reg[3:0]a;
wire[1:0]y;
pe dut (a,y);
initial
begin
a[3]=1'b0;a[2]=1'b0;a[1]=1'b0;a[0]=1'b0;
#10 a[3]=1'b0;a[2]=1'b0;a[1]=1'b0;a[0]=1'b1;
#10 a[3]=1'b0;a[2]=1'b0;a[1]=1'b1;a[0]=1'bx;
#10 a[3]=1'b0;a[2]=1'b1;a[1]=1'bx;a[0]=1'bx;
#10 a[3]=1'b1;a[2]=1'bx;a[1]=1'bx;a[0]=1'bx;
end
endmodule

orange h
module cpa(a,b,s);
input logic[3:0] a;
input logic[3:0] b;
output logic [3:0] s;
assign s=a^b;
endmodule

module cpatb;
reg[3:0] a;
reg[3:0] b;
wire[3:0] s;
cpa dut (a,b,s);
initial
begin
a = 4'b0001; b = 4'b0010;//0011
#10 a = 4'b1111; b = 4'b1010;//0101
#10 a = 4'b0101; b = 4'b1100;//1001
end
endmodule
